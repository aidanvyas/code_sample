"""
This was done on CodeSkulptor3 which was created by Scott Rixner.
"""

"""
Code to calculate the circle that passes through three given points.

Fill in each function with your code (including fixing the return
statement).
"""

import math
import comp140_module1 as circles

def distance(point0x, point0y, point1x, point1y):
    """
    Computes the distance between two points.

    inputs:
        -point0x: a float representing the x-coordinate of the first point
        -point0y: a float representing the y-coordinate of the first point
        -point1x: a float representing the x-coordinate of the second point
        -point1y: a float representing the y-coordinate of the second point

    returns: a float that is the distance between the two points
    """
    distance_var = math.sqrt((point1x - point0x) ** 2 + (point1y - point0y) ** 2)
    
    return distance_var

def midpoint(point0x, point0y, point1x, point1y):
    """
    Computes the midpoint between two points.

    inputs:
        -point0x: a float representing the x-coordinate of the first point
        -point0y: a float representing the y-coordinate of the first point
        -point1x: a float representing the x-coordinate of the second point
        -point1y: a float representing the y-coordinate of the second point

    returns: two floats that are the x- and y-coordinates of the midpoint
    """
    
    midpoint_x = point0x + ((point1x - point0x) / 2)
    midpoint_y = point0y + ((point1y - point0y) / 2)
    
    return midpoint_x, midpoint_y

def slope(point0x, point0y, point1x, point1y):
    """
    Computes the slope of the line that connects two given points.

    The x-values of the two points, point0x and poin1x, must be different.

    inputs:
        -point0x: a float representing the x-coordinate of the first point.
        -point0y: a float representing the y-coordinate of the first point
        -point1x: a float representing the x-coordinate of the second point.
        -point1y: a float representing the y-coordinate of the second point

    returns: a float that is the slope between the points
    """
    
    slope_var = (point1y - point0y) / (point1x - point0x)
    
    return slope_var

def perp(lineslope):
    """
    Computes the slope of a line perpendicular to a given slope.

    input:
        -lineslope: a float representing the slope of a line.
                    Must be non-zero

    returns: a float that is the perpendicular slope
    """
    
    perpendicular_slope = -1 / lineslope
    
    return perpendicular_slope

def intersect(slope0, point0x, point0y, slope1, point1x, point1y):
    """
    Computes the intersection point of two lines.

    The two slopes, slope0 and slope1, must be different.

    inputs:
        -slope0: a float representing the slope of the first line.
        -point0x: a float representing the x-coordinate of the first point
        -point0y: a float representing the y-coordinate of the first point
        -slope1: a float representing the slope of the second line.
        -point1x: a float representing the x-coordinate of the second point
        -point1y: a float representing the y-coordinate of the second point

    returns: two floats that are the x- and y-coordinates of the intersection
    point
    """
    slope_delta = slope0 - slope1
    intersect_x = ((slope0 * point0x) - (slope1 * point1x) + (point1y - point0y)) / (slope_delta)
    intersect_y = slope0 * (intersect_x - point0x) + point0y
    
    return intersect_x, intersect_y

def make_circle(point0x, point0y, point1x, point1y, point2x, point2y):
    """
    Computes the center and radius of a circle that passes through
    thre given points.

    The points must not be co-linear and no two points can have the
    same x or y values.

    inputs:
        -point0x: a float representing the x-coordinate of the first point
        -point0y: a float representing the y-coordinate of the first point
        -point1x: a float representing the x-coordinate of the second point
        -point1y: a float representing the y-coordinate of the second point
        -point2x: a float representing the x-coordinate of the third point
        -point2y: a float representing the y-coordinate of the third point

    returns: three floats that are the x- and y-coordinates of the center
    and the radius
    """
    distance(point0x, point0y, point1x, point1y)
    # returns distance
    midpoint_x0, midpoint_y0 = midpoint(point0x, point0y, point1x, point1y)
    # returns midpoint x and y
    slope(point0x, point0y, point1x, point1y)
    # returns slope
    perp_slope0 = perp(slope(point0x, point0y, point1x, point1y))
    # returns perpendicular slope
    
    distance(point1x, point1y, point2x, point2y)
    midpoint_x1, midpoint_y1 = midpoint(point1x, point1y, point2x, point2y)
    slope(point1x, point1y, point2x, point2y)
    perp_slope1 = perp(slope(point1x, point1y, point2x, point2y))
    
    center_x, center_y = intersect(perp_slope0, midpoint_x0, midpoint_y0, 
                                   perp_slope1, midpoint_x1, midpoint_y1)
    
    radius = distance(point0x, point0y, center_x, center_y)
    
    return center_x, center_y, radius

# Run GUI - uncomment the line below after you have
#           implemented make_circle
circles.start(make_circle)

